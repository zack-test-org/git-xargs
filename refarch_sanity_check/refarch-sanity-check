#!/usr/bin/env python

from __future__ import print_function
import click
import os

from lib import aws, assertions, global_vars, parser, utils


@click.command()
@click.option(
    "--customer-name",
    required=True,
    help="Name of customer. Should correspond to a folder name in the stacks/clients directory.")
@click.option(
    "--usage-patterns-path",
    default=os.getcwd(),
    help="Path to the usage-patterns repository. Defaults to current directory.")
@click.option(
    "--loglevel",
    default="info",
    type=click.Choice(list(global_vars.LOG_LEVEL_MAP.keys())))
def main(customer_name, usage_patterns_path, loglevel):
    """
    This is a python script that will parse the boilerplate input YAML file and sanity checks the inputs to help catch
    potential issues before you proceed with the reference architecture deployment.

    The following checks are implemented:

    - Check that you can access each customer account from the Gruntwork Customer Access account.
    - Check that all of the Acme specific vars are deleted.
    - Check that the ECR repository name is configured properly.
    - Check that the accounts have route 53 domains for the defined domains.
    - Check that ACM certificates exist for all the domains.
    - Check that all the instance types specified for EC2, RDS, and ElastiCache exist in the region.

    To use, you must provide AWS credentials for the Gruntwork Customer Access account.

    Examples:

        refarch-sanity-check \
            --customer-name acme-multi-account
    """
    utils.configure_loglevel(loglevel)

    global_vars.logger.debug("Collecting YAML files in customer account vars")
    parsed_yamls = parser.load_yaml_vars(usage_patterns_path, customer_name)
    file_names = ", ".join(parsed_yamls.keys())
    global_vars.logger.debug("Found {}".format(file_names))

    global_vars.logger.info("Checking if all Acme (test) variables are removed")
    assertions.assert_acme_variables_are_deleted(parsed_yamls)
    global_vars.logger.info("Passed check for Acme variables")

    global_vars.logger.info("Checking if ECR repository is properly configured")
    assertions.assert_ecr_repositories_configured(parsed_yamls)
    global_vars.logger.info("Passed check for ECR repository")

    global_vars.logger.info("Checking if we can assume roles in each specified account")
    environment_credentials = aws.get_environment_credentials(parsed_yamls)
    global_vars.logger.info("Passed assume role check")

    global_vars.logger.info("Checking if all the necessary domain names exist")
    assertions.assert_route_53_domains_exist(environment_credentials, parsed_yamls)
    global_vars.logger.info("Passed domain name check")

    global_vars.logger.info("Checking if ACM certificates exist for each domain")
    assertions.assert_acm_certificates_exist(environment_credentials, parsed_yamls)
    global_vars.logger.info("Passed ACM certificate check")

    global_vars.logger.info("Checking if all instance types in config is available in region")
    assertions.assert_instance_types_available(parsed_yamls)
    global_vars.logger.info("Passed instance type checks")

    global_vars.logger.info("Checking if all RDS instance types in config is available in region")
    assertions.assert_rds_instance_types_available(parsed_yamls)
    global_vars.logger.info("Passed RDS instance type checks")

    global_vars.logger.info("Checking if all ElasitCache instance types in config is available in region")
    assertions.assert_cache_instance_types_available(parsed_yamls)
    global_vars.logger.info("Passed ElastiCache instance type checks")


if __name__ == "__main__":
    main()
